//
// Project-Shared.xcconfig
//
// Generated by BuildSettingExtractor on 2022/07/31
// https://github.com/dempseyatgithub/BuildSettingExtractor
//

// Duplicate Method Definitions
// 
// Warn about declaring the same method more than once within the same `@interface`.

CLANG_WARN__DUPLICATE_METHOD_MATCH = YES



// Implicit Boolean Conversions
// 
// Warn about implicit conversions to boolean values that are suspicious. For example,
// writing `if (foo)` where `foo` is the name a function will trigger a warning.

CLANG_WARN_BOOL_CONVERSION = YES



// Suspicious Commas
// 
// Warn about suspicious uses of the comma operator.

CLANG_WARN_COMMA = YES



// Implicit Constant Conversions
// 
// Warn about implicit conversions of constant values that cause the constant value to
// change, either through a loss of precision, or entirely in its meaning.

CLANG_WARN_CONSTANT_CONVERSION = YES



// Overriding Deprecated Objective-C Methods
// 
// Warn if an Objective-C class either subclasses a deprecated class or overrides a
// method that has been marked deprecated or unavailable.

CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES



// Empty Loop Bodies
// 
// Warn about loop bodies that are suspiciously empty.

CLANG_WARN_EMPTY_BODY = YES



// Implicit Enum Conversions
// 
// Warn about implicit conversions between different kinds of enum values. For example,
// this can catch issues when using the wrong enum flag as an argument to a function or
// method.

CLANG_WARN_ENUM_CONVERSION = YES



// Infinite Recursion
// 
// Warn if all paths through a function call itself.

CLANG_WARN_INFINITE_RECURSION = YES



// Implicit Integer to Pointer Conversions
// 
// Warn about implicit conversions between pointers and integers. For example, this can
// catch issues when one incorrectly intermixes using `NSNumber*`'s and raw integers.

CLANG_WARN_INT_CONVERSION = YES



// Implicit Non-Literal Null Conversions
// 
// Warn about non-literal expressions that evaluate to zero being treated as a null
// pointer.

CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES



// Implicit retain of 'self' within blocks
// 
// Warn about implicit retains of `self` within blocks, which can create a retain-cycle.

CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES



// Implicit Objective-C Literal Conversions
// 
// Warn about implicit conversions from Objective-C literals to values of incompatible
// type.

CLANG_WARN_OBJC_LITERAL_CONVERSION = YES



// Quoted Include In Framework Header
// 
// Warns when a quoted include is used instead of a framework style include in a
// framework header.

CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER = YES



// Range-based For Loops
// 
// Warn about ranged-based for loops.

CLANG_WARN_RANGE_LOOP_ANALYSIS = YES



// Strict Prototypes
// 
// Warn about non-prototype declarations.

CLANG_WARN_STRICT_PROTOTYPES = YES



// Suspicious Moves
// 
// Warn about suspicious uses of `std::move`.

CLANG_WARN_SUSPICIOUS_MOVE = YES



// Unreachable Code
// 
// Warns about potentially unreachable code.

CLANG_WARN_UNREACHABLE_CODE = YES



// Enable Strict Checking of objc_msgSend Calls
// 
// Controls whether `objc_msgSend` calls must be cast to the appropriate function pointer
// type before being called.

ENABLE_STRICT_OBJC_MSGSEND = YES



EXCLUEDED_ARCHS = arm64, x86_64



// No Common Blocks
// 
// In C, allocate even uninitialized global variables in the data section of the object
// file, rather than generating them as common blocks. This has the effect that if the
// same variable is declared (without `extern`) in two different compilations, you will
// get an error when you link them.

GCC_NO_COMMON_BLOCKS = YES



// Implicit Conversion to 32 Bit Type
// 
// Warn if a value is implicitly converted from a 64-bit type to a 32-bit type. This is a
// subset of the warnings provided by -Wconversion.

GCC_WARN_64_TO_32_BIT_CONVERSION = YES



// Mismatched Return Type
// 
// Causes warnings to be emitted when a function with a defined return type (not `void`)
// contains a return statement without a return-value or when it does not contain any
// return statements. Also emits a warning when a function with a void return type tries
// to return a value.

GCC_WARN_ABOUT_RETURN_TYPE = YES



// Undeclared Selector
// 
// Warn if a `@selector(...)` expression referring to an undeclared selector is found. A
// selector is considered undeclared if no method with that name has been declared before
// the `@selector(...)` expression, either explicitly in an `@interface` or `@protocol`
// declaration, or implicitly in an `@implementation` section. This option always
// performs its checks as soon as a `@selector(...)` expression is found, while
// `-Wselector` only performs its checks in the final stage of compilation. This also
// enforces the coding style convention that methods and selectors must be declared
// before being used.

GCC_WARN_UNDECLARED_SELECTOR = YES



// Uninitialized Variables
// 
// Warn if a variable might be clobbered by a `setjmp` call or if an automatic variable
// is used without prior initialization.
// 
// The compiler may not detect all cases where an automatic variable is initialized or
// all usage patterns that may lead to use prior to initialization. You can toggle
// between the normal uninitialized value checking or the more aggressive (conservative)
// checking, which finds more issues but the checking is much stricter.

GCC_WARN_UNINITIALIZED_AUTOS = YES



// Unused Functions
// 
// Warn whenever a static function is declared but not defined or a noninline static
// function is unused.

GCC_WARN_UNUSED_FUNCTION = YES



// Unused Variables
// 
// Warn whenever a local variable or nonconstant static variable is unused aside from its
// declaration.

GCC_WARN_UNUSED_VARIABLE = YES